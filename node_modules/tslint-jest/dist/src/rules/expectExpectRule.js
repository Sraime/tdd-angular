"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var Lint = require("tslint");
var FAILURE_MESSAGE = 'Test has no assertions: ';
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new Walk(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var Walk = /** @class */ (function (_super) {
    __extends(Walk, _super);
    function Walk(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        _this.assertionFunctionsNames = ['expect'].concat(_this.getOptions());
        _this.testFunctionsNames = ['it', 'test'];
        return _this;
    }
    Walk.prototype.visitCallExpression = function (node) {
        if (this.testFunctionsNames.includes(node.expression.getText())) {
            if (node.arguments[1]) {
                this.testFunctionHasAssertion(node.arguments[1]);
            }
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    Walk.prototype.isCallExpressionAssertion = function (node) {
        return this.assertionFunctionsNames.includes(node.getChildAt(0).getText());
    };
    Walk.prototype.testFunctionHasAssertion = function (node) {
        var _this = this;
        var hasAssertion = false;
        var checkAssertionInChild = function (child) {
            child.getChildren().forEach(function (_child) { return checkAssertionInChild(_child); });
            if (ts.isCallExpression(child)) {
                if (_this.isCallExpressionAssertion(child)) {
                    hasAssertion = true;
                    return;
                }
            }
        };
        ts.forEachChild(node, checkAssertionInChild);
        if (!hasAssertion) {
            this.addFailureAt(node.getStart(), node.getEnd() - node.getStart(), FAILURE_MESSAGE);
        }
    };
    return Walk;
}(Lint.RuleWalker));
//# sourceMappingURL=expectExpectRule.js.map