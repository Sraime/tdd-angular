"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var FAILURE_MESSAGE = 'Test has no assertions: ';
var methodNames = {
    toBeCalled: 'toHaveBeenCalled',
    toBeCalledTimes: 'toHaveBeenCalledTimes',
    toBeCalledWith: 'toHaveBeenCalledWith',
    lastCalledWith: 'toHaveBeenLastCalledWith',
    nthCalledWith: 'toHaveBeenNthCalledWith',
    toReturn: 'toHaveReturned',
    toReturnTimes: 'toHaveReturnedTimes',
    toReturnWith: 'toHaveReturnedWith',
    lastReturnedWith: 'toHaveLastReturnedWith',
    nthReturnedWith: 'toHaveNthReturnedWith',
    toThrowError: 'toThrow'
};
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new Walk(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var Walk = /** @class */ (function (_super) {
    __extends(Walk, _super);
    function Walk(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        _this.assertionFunctionsNames = ['expect'].concat(_this.getOptions());
        _this.testFunctionsNames = ['it', 'test'];
        _this.notMatchersPossibleAccessExpressions = ['rejects', 'resolves', 'not'];
        return _this;
    }
    Walk.prototype.getFixer = function (uncanonicalMethodNode, canonicalName) {
        return new Lint.Replacement(uncanonicalMethodNode.getStart(), uncanonicalMethodNode.getText().length, canonicalName);
    };
    Walk.prototype.visitPropertyAccessExpression = function (node) {
        if (node.getChildAt(0) && node.getChildAt(0).getChildAt(0) && node.getChildAt(0).getChildAt(0).getText() === 'expect') {
            var usedMethod = node.getChildAt(2);
            var usedMethodText = usedMethod.getText();
            if (this.notMatchersPossibleAccessExpressions.includes(usedMethodText)) {
                usedMethod = node.parent.getChildAt(2);
                if (!usedMethod)
                    return;
                usedMethodText = usedMethod.getText();
            }
            var canonicalMethodName = methodNames[usedMethodText];
            if (canonicalMethodName) {
                this.addFailureAt(usedMethod.getStart(), usedMethod.getStart() + usedMethodText.length, "Replace " + usedMethodText + "() with its canonical name of " + canonicalMethodName + "()", this.getFixer(usedMethod, canonicalMethodName));
            }
        }
        _super.prototype.visitPropertyAccessExpression.call(this, node);
    };
    return Walk;
}(Lint.RuleWalker));
//# sourceMappingURL=noAliasMethodsRule.js.map