"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDirective = exports.MockDirectives = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var common_1 = require("../common");
var decorate_1 = require("../common/decorate");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var reflect_1 = require("../common/reflect");
function MockDirectives() {
    var directives = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        directives[_i] = arguments[_i];
    }
    return directives.map(MockDirective);
}
exports.MockDirectives = MockDirectives;
function MockDirective(directive) {
    var e_1, _a;
    if (testing_1.getTestBed()._instantiated) {
        try {
            return common_1.getMockedNgDefOf(directive, 'd');
        }
        catch (error) {
        }
    }
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheDirective') && ng_mocks_universe_1.ngMocksUniverse.cache.has(directive)) {
        return ng_mocks_universe_1.ngMocksUniverse.cache.get(directive);
    }
    var meta;
    if (!meta) {
        try {
            meta = reflect_1.directiveResolver.resolve(directive);
        }
        catch (e) {
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
    }
    var selector = meta.selector, exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, providers = meta.providers;
    var options = {
        exportAs: exportAs,
        providers: [
            {
                provide: directive,
                useExisting: core_1.forwardRef(function () { return DirectiveMock; }),
            },
        ],
        selector: selector,
    };
    try {
        for (var _b = __values(common_1.flatten(providers || [])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var providerDef = _c.value;
            var provide = providerDef && typeof providerDef === 'object' && providerDef.provide ? providerDef.provide : providerDef;
            if (options.providers && provide === forms_1.NG_VALIDATORS) {
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: core_1.forwardRef(function () { return DirectiveMock; }),
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var config = ng_mocks_universe_1.ngMocksUniverse.config.get(directive);
    var DirectiveMock = (function (_super) {
        __extends(DirectiveMock, _super);
        function DirectiveMock(element, template, viewContainer, ngControl) {
            var _this = _super.call(this) || this;
            if (ngControl && !ngControl.valueAccessor) {
                ngControl.valueAccessor = _this;
            }
            _this.__element = element;
            _this.__template = template;
            _this.__viewContainer = viewContainer;
            _this.__isStructural = template && viewContainer;
            _this.__render = function ($implicit, variables) {
                if (viewContainer && template) {
                    viewContainer.clear();
                    viewContainer.createEmbeddedView(template, __assign(__assign({}, variables), { $implicit: $implicit }));
                }
            };
            return _this;
        }
        DirectiveMock.prototype.ngOnInit = function () {
            if (config && config.render) {
                var _a = config.render !== true
                    ? config.render
                    : {
                        $implicit: undefined,
                        variables: {},
                    }, $implicit = _a.$implicit, variables = _a.variables;
                this.__render($implicit, variables);
            }
        };
        DirectiveMock = __decorate([
            core_1.Directive(options),
            common_1.MockOf(directive, outputs),
            __param(0, core_1.Optional()),
            __param(1, core_1.Optional()),
            __param(2, core_1.Optional()),
            __param(3, core_1.Self()), __param(3, core_1.Optional()),
            __metadata("design:paramtypes", [core_1.ElementRef,
                core_1.TemplateRef,
                core_1.ViewContainerRef,
                forms_1.NgControl])
        ], DirectiveMock);
        return DirectiveMock;
    }(common_1.MockControlValueAccessor));
    decorate_1.decorateInputs(DirectiveMock, inputs);
    decorate_1.decorateOutputs(DirectiveMock, outputs);
    decorate_1.decorateQueries(DirectiveMock, queries);
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheDirective')) {
        ng_mocks_universe_1.ngMocksUniverse.cache.set(directive, DirectiveMock);
    }
    return DirectiveMock;
}
exports.MockDirective = MockDirective;
//# sourceMappingURL=mock-directive.js.map