"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockComponent = exports.MockComponents = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var common_1 = require("../common");
var decorate_1 = require("../common/decorate");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var reflect_1 = require("../common/reflect");
function MockComponents() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return components.map(function (component) { return MockComponent(component, undefined); });
}
exports.MockComponents = MockComponents;
function MockComponent(component, metaData) {
    var e_1, _a;
    if (testing_1.getTestBed()._instantiated) {
        try {
            return common_1.getMockedNgDefOf(component, 'c');
        }
        catch (error) {
        }
    }
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheComponent') && ng_mocks_universe_1.ngMocksUniverse.cache.has(component)) {
        return ng_mocks_universe_1.ngMocksUniverse.cache.get(component);
    }
    var meta = metaData;
    if (!meta) {
        try {
            meta = reflect_1.directiveResolver.resolve(component);
        }
        catch (e) {
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
    }
    var exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, selector = meta.selector, providers = meta.providers;
    var template = "<ng-content></ng-content>";
    var viewChildRefs = new Map();
    if (queries) {
        var queriesKeys = Object.keys(queries);
        var templateQueries = queriesKeys
            .map(function (key) {
            var query = queries[key];
            if (query.isViewQuery) {
                return '';
            }
            if (typeof query.selector !== 'string') {
                return '';
            }
            viewChildRefs.set(query.selector, key);
            queries["__mockView_" + key] = new core_1.ViewChild("__" + query.selector, {
                read: core_1.ViewContainerRef,
                static: false,
            });
            return "\n          <div *ngIf=\"mockRender_" + query.selector + "\" data-key=\"" + query.selector + "\">\n            <ng-template #__" + query.selector + "></ng-template>\n          </div>\n        ";
        })
            .join('');
        if (templateQueries) {
            template = "\n        " + template + "\n        " + templateQueries + "\n      ";
        }
    }
    var options = {
        exportAs: exportAs,
        providers: [
            {
                provide: component,
                useExisting: core_1.forwardRef(function () { return ComponentMock; }),
            },
        ],
        selector: selector,
        template: template,
    };
    try {
        for (var _b = __values(common_1.flatten(providers || [])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var providerDef = _c.value;
            var provide = providerDef && typeof providerDef === 'object' && providerDef.provide ? providerDef.provide : providerDef;
            if (options.providers && provide === forms_1.NG_VALIDATORS) {
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: core_1.forwardRef(function () { return ComponentMock; }),
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var config = ng_mocks_universe_1.ngMocksUniverse.config.get(component);
    var ComponentMock = (function (_super) {
        __extends(ComponentMock, _super);
        function ComponentMock(changeDetector, ngControl) {
            var _this = _super.call(this) || this;
            if (ngControl && !ngControl.valueAccessor) {
                ngControl.valueAccessor = _this;
            }
            _this.__hide = function (contentChildSelector) {
                var key = viewChildRefs.get(contentChildSelector);
                if (key) {
                    _this["mockRender_" + contentChildSelector] = false;
                    changeDetector.detectChanges();
                }
            };
            _this.__render = function (contentChildSelector, $implicit, variables) {
                var key = viewChildRefs.get(contentChildSelector);
                var templateRef;
                var viewContainer;
                if (key) {
                    _this["mockRender_" + contentChildSelector] = true;
                    changeDetector.detectChanges();
                    viewContainer = _this["__mockView_" + key];
                    templateRef = _this[key];
                    if (viewContainer && templateRef) {
                        viewContainer.clear();
                        viewContainer.createEmbeddedView(templateRef, __assign(__assign({}, variables), { $implicit: $implicit }));
                        changeDetector.detectChanges();
                    }
                }
            };
            return _this;
        }
        ComponentMock.prototype.ngAfterContentInit = function () {
            var e_2, _a;
            if (!this.__rendered && config && config.render) {
                try {
                    for (var _b = __values(Object.keys(config.render)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var block = _c.value;
                        var _d = config.render[block] !== true
                            ? config.render[block]
                            : {
                                $implicit: undefined,
                                variables: {},
                            }, $implicit = _d.$implicit, variables = _d.variables;
                        this.__render(block, $implicit, variables);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                this.__rendered = true;
            }
        };
        ComponentMock = __decorate([
            core_1.Component(options),
            common_1.MockOf(component, outputs),
            __param(1, core_1.Self()), __param(1, core_1.Optional()),
            __metadata("design:paramtypes", [core_1.ChangeDetectorRef, forms_1.NgControl])
        ], ComponentMock);
        return ComponentMock;
    }(common_1.MockControlValueAccessor));
    decorate_1.decorateInputs(ComponentMock, inputs);
    decorate_1.decorateOutputs(ComponentMock, outputs);
    decorate_1.decorateQueries(ComponentMock, queries);
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheComponent')) {
        ng_mocks_universe_1.ngMocksUniverse.cache.set(component, ComponentMock);
    }
    return ComponentMock;
}
exports.MockComponent = MockComponent;
//# sourceMappingURL=mock-component.js.map