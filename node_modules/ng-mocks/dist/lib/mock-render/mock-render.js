"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRender = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var rxjs_1 = require("rxjs");
var reflect_1 = require("../common/reflect");
var mock_helper_1 = require("../mock-helper");
var mock_service_1 = require("../mock-service");
function solveOutput(output) {
    if (typeof output === 'function') {
        return '($event)';
    }
    if (output && typeof output === 'object' && output instanceof core_1.EventEmitter) {
        return '.emit($event)';
    }
    if (output && typeof output === 'object' && output instanceof rxjs_1.Subject) {
        return '.next($event)';
    }
    return '=$event';
}
function MockRender(template, params, flags) {
    var e_1, _a, e_2, _b;
    if (flags === void 0) { flags = true; }
    var flagsObject = typeof flags === 'boolean' ? { detectChanges: flags } : flags;
    var isComponent = typeof template !== 'string';
    var noParams = !params;
    var inputs = [];
    var outputs = [];
    var selector = '';
    var mockedTemplate = '';
    if (typeof template === 'string') {
        mockedTemplate = template;
    }
    else {
        var meta = void 0;
        if (!meta) {
            try {
                meta = reflect_1.directiveResolver.resolve(template);
            }
            catch (e) {
                throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
            }
        }
        inputs = meta.inputs;
        outputs = meta.outputs;
        selector = meta.selector;
        mockedTemplate += selector ? "<" + selector : '';
        if (selector && inputs) {
            inputs.forEach(function (definition) {
                var _a = __read(definition.split(': '), 2), property = _a[0], alias = _a[1];
                if (alias && params && typeof params[alias]) {
                    mockedTemplate += " [" + alias + "]=\"" + alias + "\"";
                }
                else if (property && params && typeof params[property]) {
                    mockedTemplate += " [" + property + "]=\"" + property + "\"";
                }
                else if (alias && noParams) {
                    mockedTemplate += " [" + alias + "]=\"" + property + "\"";
                }
                else if (noParams) {
                    mockedTemplate += " [" + property + "]=\"" + property + "\"";
                }
            });
        }
        if (selector && outputs) {
            outputs.forEach(function (definition) {
                var _a = __read(definition.split(': '), 2), property = _a[0], alias = _a[1];
                if (alias && params && typeof params[alias]) {
                    mockedTemplate += " (" + alias + ")=\"" + alias + solveOutput(params[alias]) + "\"";
                }
                else if (property && params && typeof params[property]) {
                    mockedTemplate += " (" + property + ")=\"" + property + solveOutput(params[property]) + "\"";
                }
                else if (alias && noParams) {
                    mockedTemplate += " (" + alias + ")=\"" + property + ".emit($event)\"";
                }
                else if (noParams) {
                    mockedTemplate += " (" + property + ")=\"" + property + ".emit($event)\"";
                }
            });
        }
        mockedTemplate += selector ? "></" + selector + ">" : '';
    }
    var options = {
        providers: flagsObject.providers,
        selector: 'mock-render',
        template: mockedTemplate,
    };
    var component = core_1.Component(options)((function () {
        function MockRenderComponent() {
            var e_3, _a, e_4, _b, e_5, _c;
            try {
                for (var _d = __values(Object.keys(params || {})), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var key = _e.value;
                    this[key] = params[key];
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (noParams && isComponent && inputs) {
                try {
                    for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                        var definition = inputs_1_1.value;
                        var _f = __read(definition.split(': '), 1), property = _f[0];
                        this[property] = undefined;
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (inputs_1_1 && !inputs_1_1.done && (_b = inputs_1.return)) _b.call(inputs_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            if (noParams && isComponent && outputs) {
                try {
                    for (var outputs_1 = __values(outputs), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                        var definition = outputs_1_1.value;
                        var _g = __read(definition.split(': '), 1), property = _g[0];
                        this[property] = new core_1.EventEmitter();
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (outputs_1_1 && !outputs_1_1.done && (_c = outputs_1.return)) _c.call(outputs_1);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        return MockRenderComponent;
    }()));
    mock_helper_1.ngMocks.flushTestBed();
    testing_1.TestBed.configureTestingModule({
        declarations: [component],
    });
    var fixture = testing_1.TestBed.createComponent(component);
    if (flagsObject.detectChanges) {
        fixture.detectChanges();
    }
    fixture.point = fixture.debugElement.children[0];
    if (noParams && typeof template === 'function') {
        var properties = mock_service_1.mockServiceHelper.extractPropertiesFromPrototype(template.prototype);
        var exists = Object.getOwnPropertyNames(fixture.componentInstance);
        var _loop_1 = function (property) {
            if (exists.indexOf(property) !== -1) {
                return "continue";
            }
            Object.defineProperty(fixture.componentInstance, property, {
                get: function () { return fixture.point.componentInstance[property]; },
                set: function (v) { return (fixture.point.componentInstance[property] = v); },
                configurable: true,
                enumerable: true,
            });
        };
        try {
            for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                var property = properties_1_1.value;
                _loop_1(property);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var methods = mock_service_1.mockServiceHelper.extractMethodsFromPrototype(template.prototype);
        var _loop_2 = function (method) {
            if (exists.indexOf(method) !== -1) {
                return "continue";
            }
            Object.defineProperty(fixture.componentInstance, method, {
                value: function () {
                    var _a;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return (_a = fixture.point.componentInstance)[method].apply(_a, __spread(args));
                },
                configurable: true,
                enumerable: true,
                writable: true,
            });
        };
        try {
            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
                var method = methods_1_1.value;
                _loop_2(method);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (methods_1_1 && !methods_1_1.done && (_b = methods_1.return)) _b.call(methods_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    return fixture;
}
exports.MockRender = MockRender;
//# sourceMappingURL=mock-render.js.map