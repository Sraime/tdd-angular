import { DebugElement, DebugNode, Provider } from '@angular/core';
import { ComponentFixture } from '@angular/core/testing';
import { Type } from '../common';
export interface MockedDebugNode<T = any> extends DebugNode {
    componentInstance: T;
}
export interface MockedDebugElement<T = any> extends DebugElement, MockedDebugNode<T> {
    componentInstance: T;
}
export interface IMockRenderOptions {
    detectChanges?: boolean;
    providers?: Provider[];
}
export interface MockedComponentFixture<C = any, F = DefaultRenderComponent<C>> extends ComponentFixture<F> {
    point: MockedDebugElement<C>;
}
export declare type DefaultRenderComponent<MComponent extends Record<keyof any, any>> = {
    [K in keyof MComponent]: MComponent[K];
};
declare function MockRender<MComponent, TComponent extends {
    [key: string]: any;
}>(template: Type<MComponent>, params: TComponent, detectChanges?: boolean | IMockRenderOptions): MockedComponentFixture<MComponent, TComponent>;
declare function MockRender<MComponent extends Record<keyof any, any>>(template: Type<MComponent>): MockedComponentFixture<MComponent>;
declare function MockRender<MComponent = any, TComponent extends {
    [key: string]: any;
} = {
    [key: string]: any;
}>(template: string, params: TComponent, detectChanges?: boolean | IMockRenderOptions): MockedComponentFixture<MComponent, TComponent>;
declare function MockRender<MComponent = any>(template: string): MockedComponentFixture<MComponent>;
export { MockRender };
