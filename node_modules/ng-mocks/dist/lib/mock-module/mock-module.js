"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockModule = exports.MockProvider = void 0;
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var common_2 = require("../common");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var reflect_1 = require("../common/reflect");
var mock_component_1 = require("../mock-component");
var mock_directive_1 = require("../mock-directive");
var mock_pipe_1 = require("../mock-pipe");
var mock_service_1 = require("../mock-service");
var neverMockProvidedFunction = ['DomRendererFactory2', 'DomSharedStylesHost', 'EventManager', 'RendererFactory2'];
function MockProvider(provider) {
    var provide = typeof provider === 'object' && provider.provide ? provider.provide : provider;
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheProvider') && ng_mocks_universe_1.ngMocksUniverse.cache.has(provide)) {
        return ng_mocks_universe_1.ngMocksUniverse.cache.get(provide);
    }
    if (typeof provide === 'object' && provide.ngMetadataName === 'InjectionToken') {
        return undefined;
    }
    if (typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1) {
        return provider;
    }
    var mockedProvider = {
        provide: provide,
        useValue: mock_service_1.MockService(provide),
    };
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheProvider')) {
        ng_mocks_universe_1.ngMocksUniverse.cache.set(provide, mockedProvider);
    }
    return mockedProvider;
}
exports.MockProvider = MockProvider;
function MockModule(module) {
    var ngModule;
    var ngModuleProviders;
    var mockModule;
    var mockModuleProviders;
    var mockModuleDef;
    var releaseSkipMockFlag = false;
    if (common_2.isNgModuleDefWithProviders(module)) {
        ngModule = module.ngModule;
        if (module.providers) {
            ngModuleProviders = module.providers;
        }
    }
    else {
        ngModule = module;
    }
    if (NEVER_MOCK.indexOf(ngModule) !== -1) {
        return module;
    }
    if (!ngModuleProviders && testing_1.getTestBed()._instantiated) {
        try {
            return common_2.getMockedNgDefOf(ngModule, 'm');
        }
        catch (error) {
        }
    }
    if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheModule') && ng_mocks_universe_1.ngMocksUniverse.cache.has(ngModule)) {
        mockModule = ng_mocks_universe_1.ngMocksUniverse.cache.get(ngModule);
    }
    if (!mockModule && ng_mocks_universe_1.ngMocksUniverse.builder.has(ngModule)) {
        var instance = ng_mocks_universe_1.ngMocksUniverse.builder.get(ngModule);
        if (common_2.isNgDef(instance, 'm') && instance !== ngModule) {
            mockModule = instance;
        }
        if (!ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock')) {
            releaseSkipMockFlag = true;
            ng_mocks_universe_1.ngMocksUniverse.flags.add('skipMock');
        }
    }
    if (!mockModule) {
        var meta = void 0;
        if (!meta) {
            try {
                meta = reflect_1.ngModuleResolver.resolve(ngModule);
            }
            catch (e) {
                throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
            }
        }
        var _a = __read(MockNgModuleDef(meta, ngModule), 2), changed = _a[0], ngModuleDef = _a[1];
        if (changed) {
            mockModuleDef = ngModuleDef;
        }
    }
    if (mockModuleDef) {
        var parent_1 = ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock') ? ngModule : common_2.Mock;
        window.ngMocksParent = parent_1;
        try {
            eval("\n        class mockModule extends window.ngMocksParent {\n        }\n        window.ngMocksResult = mockModule\n      ");
            mockModule = window.ngMocksResult;
        }
        catch (e) {
            var ClassEs5 = (function (_super) {
                __extends(ClassEs5, _super);
                function ClassEs5() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return ClassEs5;
            }(parent_1));
            mockModule = ClassEs5;
        }
        window.ngMocksParent = undefined;
        if (mockModule) {
            mockModule.parameters = reflect_1.jitReflector.parameters(parent_1);
        }
        core_1.NgModule(mockModuleDef)(mockModule);
        common_2.MockOf(ngModule)(mockModule);
        if (ng_mocks_universe_1.ngMocksUniverse.flags.has('cacheModule')) {
            ng_mocks_universe_1.ngMocksUniverse.cache.set(ngModule, mockModule);
        }
    }
    if (!mockModule) {
        mockModule = ngModule;
    }
    if (ngModuleProviders) {
        var _b = __read(MockNgModuleDef({ providers: ngModuleProviders }), 2), changed = _b[0], ngModuleDef = _b[1];
        mockModuleProviders = changed ? ngModuleDef.providers : ngModuleProviders;
    }
    if (releaseSkipMockFlag) {
        ng_mocks_universe_1.ngMocksUniverse.flags.delete('skipMock');
    }
    return mockModule === ngModule && mockModuleProviders === ngModuleProviders
        ? module
        : common_2.isNgModuleDefWithProviders(module)
            ? __assign({ ngModule: mockModule }, (mockModuleProviders ? { providers: mockModuleProviders } : {})) : mockModule;
}
exports.MockModule = MockModule;
var NEVER_MOCK = [common_1.CommonModule, core_1.ApplicationModule];
function MockNgModuleDef(ngModuleDef, ngModule) {
    var e_1, _a;
    var changed = !ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock');
    var mockedModuleDef = {};
    var _b = ngModuleDef.bootstrap, bootstrap = _b === void 0 ? [] : _b, _c = ngModuleDef.declarations, declarations = _c === void 0 ? [] : _c, _d = ngModuleDef.entryComponents, entryComponents = _d === void 0 ? [] : _d, _e = ngModuleDef.exports, exports = _e === void 0 ? [] : _e, _f = ngModuleDef.imports, imports = _f === void 0 ? [] : _f, _g = ngModuleDef.providers, providers = _g === void 0 ? [] : _g;
    var resolutions = new Map();
    var resolveProvider = function (def) {
        var provider = typeof def === 'object' && def.provide ? def.provide : def;
        var multi = def !== provider && !!def.multi;
        var mockedDef;
        if (resolutions.has(provider)) {
            mockedDef = resolutions.get(provider);
            return multi && typeof mockedDef === 'object' ? __assign(__assign({}, mockedDef), { multi: multi }) : mockedDef;
        }
        ng_mocks_universe_1.ngMocksUniverse.touches.add(provider);
        if (!mockedDef && ng_mocks_universe_1.ngMocksUniverse.builder.has(provider)) {
            mockedDef = ng_mocks_universe_1.ngMocksUniverse.builder.get(provider);
            if (mockedDef === provider) {
                mockedDef = def;
            }
            else if (mockedDef === undefined) {
                mockedDef = {
                    provide: provider,
                    useValue: undefined,
                };
            }
        }
        if (!mockedDef && ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock')) {
            mockedDef = def;
        }
        if (!mockedDef) {
            mockedDef = MockProvider(def);
        }
        if (provider !== def && mockedDef && mockedDef.useValue) {
            var useValue = mock_service_1.mockServiceHelper.replaceWithMocks(mockedDef.useValue);
            mockedDef =
                useValue === mockedDef.useValue
                    ? mockedDef
                    : __assign(__assign({}, mockedDef), { useValue: useValue });
        }
        if (!common_2.isNgInjectionToken(provider) || def !== mockedDef) {
            resolutions.set(provider, mockedDef);
        }
        changed = changed || mockedDef !== def;
        return multi && typeof mockedDef === 'object' ? __assign(__assign({}, mockedDef), { multi: multi }) : mockedDef;
    };
    var resolve = function (def) {
        var mockedDef;
        if (resolutions.has(def)) {
            return resolutions.get(def);
        }
        ng_mocks_universe_1.ngMocksUniverse.touches.add(common_2.isNgModuleDefWithProviders(def) ? def.ngModule : def);
        if (!mockedDef && common_2.isNgDef(def, 'm')) {
            mockedDef = MockModule(def);
        }
        if (!mockedDef && common_2.isNgModuleDefWithProviders(def)) {
            mockedDef = MockModule(def);
            resolutions.set(def.ngModule, mockedDef.ngModule);
        }
        if (!mockedDef && ng_mocks_universe_1.ngMocksUniverse.builder.has(def)) {
            mockedDef = ng_mocks_universe_1.ngMocksUniverse.builder.get(def);
        }
        if (!mockedDef && ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock')) {
            mockedDef = def;
        }
        if (!mockedDef && common_2.isNgDef(def, 'c')) {
            mockedDef = mock_component_1.MockComponent(def);
        }
        if (!mockedDef && common_2.isNgDef(def, 'd')) {
            mockedDef = mock_directive_1.MockDirective(def);
        }
        if (!mockedDef && common_2.isNgDef(def, 'p')) {
            mockedDef = mock_pipe_1.MockPipe(def);
        }
        if (!mockedDef) {
            mockedDef = resolveProvider(def);
        }
        resolutions.set(def, mockedDef);
        changed = changed || mockedDef !== def;
        return mockedDef;
    };
    if (imports && imports.length) {
        mockedModuleDef.imports = common_2.flatten(imports).map(resolve);
    }
    if (declarations && declarations.length) {
        mockedModuleDef.declarations = common_2.flatten(declarations).map(resolve);
    }
    if (entryComponents && entryComponents.length) {
        mockedModuleDef.entryComponents = common_2.flatten(entryComponents).map(resolve);
    }
    if (bootstrap && bootstrap.length) {
        mockedModuleDef.bootstrap = common_2.flatten(bootstrap).map(resolve);
    }
    if (providers && providers.length) {
        mockedModuleDef.providers = common_2.flatten(providers)
            .map(resolveProvider)
            .filter(function (provider) { return provider; });
    }
    if (exports && exports.length) {
        mockedModuleDef.exports = common_2.flatten(exports).map(resolve);
    }
    var correctExports = ng_mocks_universe_1.ngMocksUniverse.flags.has('skipMock') || ng_mocks_universe_1.ngMocksUniverse.flags.has('correctModuleExports');
    try {
        for (var _h = __values(common_2.flatten([imports || [], declarations || []])), _j = _h.next(); !_j.done; _j = _h.next()) {
            var def = _j.value;
            var instance = common_2.isNgModuleDefWithProviders(def) ? def.ngModule : def;
            var mockedDef = resolve(instance);
            var config = ng_mocks_universe_1.ngMocksUniverse.config.get(instance) || {};
            if (config.export && ngModule) {
                var moduleConfig = ng_mocks_universe_1.ngMocksUniverse.config.get(ngModule) || {};
                if (!moduleConfig.export) {
                    moduleConfig.export = true;
                    ng_mocks_universe_1.ngMocksUniverse.config.set(ngModule, moduleConfig);
                }
            }
            if (correctExports && !config.export) {
                continue;
            }
            if (mockedModuleDef.exports && mockedModuleDef.exports.indexOf(mockedDef) !== -1) {
                continue;
            }
            changed = true;
            mockedModuleDef.exports = mockedModuleDef.exports || [];
            mockedModuleDef.exports.push(mockedDef);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return [changed, mockedModuleDef];
}
//# sourceMappingURL=mock-module.js.map