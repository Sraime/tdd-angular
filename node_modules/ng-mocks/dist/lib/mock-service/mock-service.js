"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockService = exports.mockServiceHelper = void 0;
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var isFunc = function (value) {
    if (typeof value !== 'function') {
        return false;
    }
    var proto = value.toString();
    if (proto.match(/^\(/) !== null) {
        return true;
    }
    return proto.match(/^function\s*\(/) !== null;
};
var isClass = function (value) {
    if (typeof value !== 'function') {
        return false;
    }
    if (isFunc(value)) {
        return false;
    }
    var proto = value.toString();
    if (proto.match(/^class\b/) !== null) {
        return true;
    }
    return proto.match(/^function\s*\(/) === null;
};
var isInst = function (value) {
    if (value === null) {
        return false;
    }
    if (typeof value !== 'object') {
        return false;
    }
    if (value.ngMetadataName === 'InjectionToken') {
        return false;
    }
    return typeof Object.getPrototypeOf(value) === 'object';
};
var customMockFunction;
var mockServiceHelperPrototype = {
    mockFunction: function (mockName, original) {
        if (original === void 0) { original = false; }
        var func;
        if (customMockFunction && !original) {
            func = customMockFunction(mockName);
        }
        else {
            func = function (val) {
                if (setValue) {
                    setValue(val);
                }
                return value;
            };
        }
        var value;
        var setValue;
        func.__ngMocks = true;
        func.__ngMocksSet = function (newSetValue) { return (setValue = newSetValue); };
        func.__ngMocksGet = function (newValue) { return (value = newValue); };
        return func;
    },
    registerMockFunction: function (mockFunction) {
        customMockFunction = mockFunction;
    },
    createMockFromPrototype: function (service) {
        var e_1, _a;
        var methods = mockServiceHelperPrototype.extractMethodsFromPrototype(service);
        var value = {};
        try {
            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
                var method = methods_1_1.value;
                if (value[method]) {
                    continue;
                }
                var mockName = (service.constructor ? service.constructor.name : 'unknown') + "." + method;
                value[method] = mockServiceHelperPrototype.mockFunction(mockName);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (typeof value === 'object' && typeof service === 'object') {
            Object.setPrototypeOf(value, service);
        }
        return value;
    },
    extractMethodsFromPrototype: function (service) {
        var e_2, _a;
        var result = [];
        var prototype = service;
        while (prototype && Object.getPrototypeOf(prototype) !== null) {
            try {
                for (var _b = (e_2 = void 0, __values(Object.getOwnPropertyNames(prototype))), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var method = _c.value;
                    if (method === 'constructor') {
                        continue;
                    }
                    var descriptor = Object.getOwnPropertyDescriptor(prototype, method);
                    var isGetterSetter = descriptor && (descriptor.get || descriptor.set);
                    if (isGetterSetter || result.indexOf(method) !== -1) {
                        continue;
                    }
                    result.push(method);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            prototype = Object.getPrototypeOf(prototype);
        }
        return result;
    },
    extractPropertiesFromPrototype: function (service) {
        var e_3, _a;
        var result = [];
        var prototype = service;
        while (prototype && Object.getPrototypeOf(prototype) !== null) {
            try {
                for (var _b = (e_3 = void 0, __values(Object.getOwnPropertyNames(prototype))), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var prop = _c.value;
                    if (prop === 'constructor') {
                        continue;
                    }
                    var descriptor = Object.getOwnPropertyDescriptor(prototype, prop);
                    var isGetterSetter = descriptor && (descriptor.get || descriptor.set);
                    if (!isGetterSetter || result.indexOf(prop) !== -1) {
                        continue;
                    }
                    result.push(prop);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            prototype = Object.getPrototypeOf(prototype);
        }
        return result;
    },
    extractPropertyDescriptor: function (service, prop) {
        var prototype = service;
        while (prototype && Object.getPrototypeOf(prototype) !== null) {
            var descriptor = Object.getOwnPropertyDescriptor(prototype, prop);
            if (descriptor) {
                return descriptor;
            }
            prototype = Object.getPrototypeOf(prototype);
        }
    },
    mock: function (instance, name, accessType) {
        var _a;
        var def = Object.getOwnPropertyDescriptor(instance, name);
        if (def && def[accessType || 'value']) {
            return def[accessType || 'value'];
        }
        var mockName = (typeof instance.prototype === 'function'
            ? instance.prototype.name
            : typeof instance.constructor === 'function'
                ? instance.constructor.name
                : 'unknown') + "." + name + (accessType ? ":" + accessType : '');
        var mock = mockServiceHelperPrototype.mockFunction(mockName, !!accessType);
        var mockDef = __assign(__assign(__assign(__assign({}, (accessType === 'get' && def && def.set
            ? {
                set: def.set,
            }
            : {})), (accessType === 'set' && def && def.get
            ? {
                get: def.get,
            }
            : {})), (accessType
            ? {}
            : {
                writable: true,
            })), (_a = {}, _a[accessType || 'value'] = mock, _a.configurable = true, _a.enumerable = true, _a));
        if (mockDef.get && mockDef.set && mockDef.get.__ngMocks && mockDef.set.__ngMocks) {
            mockDef.set.__ngMocksSet(function (val) { return mockDef.get.__ngMocksGet(val); });
        }
        Object.defineProperty(instance, name, mockDef);
        return mock;
    },
    replaceWithMocks: function (value) {
        var e_4, _a;
        if (ng_mocks_universe_1.ngMocksUniverse.cache.has(value)) {
            return ng_mocks_universe_1.ngMocksUniverse.cache.get(value);
        }
        if (typeof value !== 'object') {
            return value;
        }
        var mocked;
        var updated = false;
        if (Array.isArray(value)) {
            mocked = [];
            for (var key = 0; key < value.length; key += 1) {
                mocked[key] = exports.mockServiceHelper.replaceWithMocks(value[key]);
                updated = updated || mocked[key] !== value[key];
            }
        }
        else if (value) {
            mocked = {};
            try {
                for (var _b = __values(Object.keys(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    mocked[key] = exports.mockServiceHelper.replaceWithMocks(value[key]);
                    updated = updated || mocked[key] !== value[key];
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (updated) {
            Object.setPrototypeOf(mocked, Object.getPrototypeOf(value));
            return mocked;
        }
        return value;
    },
};
(window || global).ngMocksMockServiceHelper =
    (window || global).ngMocksMockServiceHelper || mockServiceHelperPrototype;
var localHelper = (window || global).ngMocksMockServiceHelper;
exports.mockServiceHelper = (window || global).ngMocksMockServiceHelper;
function MockService(service, mockNamePrefix) {
    var e_5, _a;
    var value;
    if (isClass(service)) {
        value = localHelper.createMockFromPrototype(service.prototype);
    }
    else if (isFunc(service)) {
        value = localHelper.mockFunction("func:" + (mockNamePrefix ? mockNamePrefix : service.name || 'arrow-function'));
    }
    else if (Array.isArray(service)) {
        value = [];
    }
    else if (isInst(service)) {
        value =
            typeof service.constructor === 'function'
                ? localHelper.createMockFromPrototype(service.constructor.prototype)
                : {};
        try {
            for (var _b = __values(Object.keys(service)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                var mock = MockService(service[property], (mockNamePrefix ? mockNamePrefix : 'instance') + "." + property);
                if (mock !== undefined) {
                    value[property] = mock;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        Object.setPrototypeOf(value, Object.getPrototypeOf(service));
    }
    return value;
}
exports.MockService = MockService;
//# sourceMappingURL=mock-service.js.map