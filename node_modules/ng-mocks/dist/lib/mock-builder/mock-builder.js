"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockBuilder = exports.MockBuilderPromise = void 0;
var testing_1 = require("@angular/core/testing");
var common_1 = require("../common");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var mock_component_1 = require("../mock-component");
var mock_directive_1 = require("../mock-directive");
var mock_module_1 = require("../mock-module");
var mock_pipe_1 = require("../mock-pipe");
var defaultMock = {};
var MockBuilderPromise = (function () {
    function MockBuilderPromise() {
        this.beforeCC = new Set();
        this.configDef = new Map();
        this.keepDef = {
            component: new Set(),
            directive: new Set(),
            module: new Set(),
            pipe: new Set(),
            provider: new Set(),
        };
        this.mockDef = {
            component: new Set(),
            directive: new Set(),
            module: new Set(),
            pipe: new Set(),
            pipeTransform: new Map(),
            provider: new Set(),
            providerMock: new Map(),
        };
        this.providerDef = new Map();
        this.replaceDef = {
            component: new Map(),
            directive: new Map(),
            module: new Map(),
            pipe: new Map(),
        };
    }
    MockBuilderPromise.prototype.beforeCompileComponents = function (callback) {
        this.beforeCC.add(callback);
        return this;
    };
    MockBuilderPromise.prototype.build = function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k, e_11, _l, e_12, _m, e_13, _o, e_14, _p;
        var backup = {
            builder: ng_mocks_universe_1.ngMocksUniverse.builder,
            cache: ng_mocks_universe_1.ngMocksUniverse.cache,
            config: ng_mocks_universe_1.ngMocksUniverse.config,
            flags: ng_mocks_universe_1.ngMocksUniverse.flags,
            touches: ng_mocks_universe_1.ngMocksUniverse.touches,
        };
        ng_mocks_universe_1.ngMocksUniverse.builder = new Map();
        ng_mocks_universe_1.ngMocksUniverse.cache = new Map();
        ng_mocks_universe_1.ngMocksUniverse.config = this.configDef;
        ng_mocks_universe_1.ngMocksUniverse.flags = new Set([
            'cacheComponent',
            'cacheDirective',
            'cacheModule',
            'cachePipe',
            'cacheProvider',
            'correctModuleExports',
        ]);
        ng_mocks_universe_1.ngMocksUniverse.touches = new Set();
        try {
            for (var _q = __values(__spread(common_1.mapValues(this.keepDef.provider), common_1.mapValues(this.keepDef.pipe), common_1.mapValues(this.keepDef.directive), common_1.mapValues(this.keepDef.component), common_1.mapValues(this.keepDef.module))), _r = _q.next(); !_r.done; _r = _q.next()) {
                var def = _r.value;
                ng_mocks_universe_1.ngMocksUniverse.builder.set(def, def);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_a = _q.return)) _a.call(_q);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _s = __values(__spread(common_1.mapEntries(this.replaceDef.pipe), common_1.mapEntries(this.replaceDef.directive), common_1.mapEntries(this.replaceDef.component), common_1.mapEntries(this.replaceDef.module))), _t = _s.next(); !_t.done; _t = _s.next()) {
                var _u = __read(_t.value, 2), source = _u[0], destination = _u[1];
                ng_mocks_universe_1.ngMocksUniverse.builder.set(source, destination);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_b = _s.return)) _b.call(_s);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _v = __values(common_1.mapValues(this.mockDef.provider)), _w = _v.next(); !_w.done; _w = _v.next()) {
                var def = _w.value;
                if (this.mockDef.providerMock.has(def)) {
                    ng_mocks_universe_1.ngMocksUniverse.builder.set(def, { provide: def, useValue: this.mockDef.providerMock.get(def) });
                }
                else {
                    ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_module_1.MockProvider(def));
                }
                ng_mocks_universe_1.ngMocksUniverse.touches.delete(def);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_w && !_w.done && (_c = _v.return)) _c.call(_v);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _x = __values(common_1.mapValues(this.mockDef.pipe)), _y = _x.next(); !_y.done; _y = _x.next()) {
                var def = _y.value;
                if (this.mockDef.pipeTransform.has(def)) {
                    ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_pipe_1.MockPipe(def, this.mockDef.pipeTransform.get(def)));
                }
                else {
                    ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_pipe_1.MockPipe(def));
                }
                ng_mocks_universe_1.ngMocksUniverse.touches.delete(def);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_y && !_y.done && (_d = _x.return)) _d.call(_x);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _z = __values(common_1.mapValues(this.mockDef.directive)), _0 = _z.next(); !_0.done; _0 = _z.next()) {
                var def = _0.value;
                ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_directive_1.MockDirective(def));
                ng_mocks_universe_1.ngMocksUniverse.touches.delete(def);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_0 && !_0.done && (_e = _z.return)) _e.call(_z);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _1 = __values(common_1.mapValues(this.mockDef.component)), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                var def = _2.value;
                ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_component_1.MockComponent(def));
                ng_mocks_universe_1.ngMocksUniverse.touches.delete(def);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_2 && !_2.done && (_f = _1.return)) _f.call(_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            for (var _3 = __values(__spread(common_1.mapValues(this.mockDef.module), common_1.mapValues(this.keepDef.module), common_1.mapKeys(this.replaceDef.module))), _4 = _3.next(); !_4.done; _4 = _3.next()) {
                var def = _4.value;
                ng_mocks_universe_1.ngMocksUniverse.builder.set(def, mock_module_1.MockModule(def));
                ng_mocks_universe_1.ngMocksUniverse.touches.delete(def);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_4 && !_4.done && (_g = _3.return)) _g.call(_3);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var imports = [];
        try {
            for (var _5 = __values(__spread(common_1.mapValues(this.mockDef.module), common_1.mapValues(this.keepDef.module), common_1.mapKeys(this.replaceDef.module))), _6 = _5.next(); !_6.done; _6 = _5.next()) {
                var def = _6.value;
                if (ng_mocks_universe_1.ngMocksUniverse.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                imports.push(ng_mocks_universe_1.ngMocksUniverse.builder.get(def));
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_6 && !_6.done && (_h = _5.return)) _h.call(_5);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var declarations = [];
        try {
            for (var _7 = __values(__spread(common_1.mapValues(this.keepDef.pipe), common_1.mapValues(this.keepDef.directive), common_1.mapValues(this.keepDef.component), common_1.mapKeys(this.replaceDef.pipe), common_1.mapKeys(this.replaceDef.directive), common_1.mapKeys(this.replaceDef.component), common_1.mapValues(this.mockDef.pipe), common_1.mapValues(this.mockDef.directive), common_1.mapValues(this.mockDef.component))), _8 = _7.next(); !_8.done; _8 = _7.next()) {
                var def = _8.value;
                if (ng_mocks_universe_1.ngMocksUniverse.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                declarations.push(ng_mocks_universe_1.ngMocksUniverse.builder.get(def));
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_8 && !_8.done && (_j = _7.return)) _j.call(_7);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var providers = [];
        try {
            for (var _9 = __values(common_1.mapValues(this.keepDef.provider)), _10 = _9.next(); !_10.done; _10 = _9.next()) {
                var def = _10.value;
                if (ng_mocks_universe_1.ngMocksUniverse.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                if (common_1.isNgInjectionToken(def)) {
                    continue;
                }
                providers.push(def);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_10 && !_10.done && (_k = _9.return)) _k.call(_9);
            }
            finally { if (e_10) throw e_10.error; }
        }
        try {
            for (var _11 = __values(common_1.mapValues(this.mockDef.provider)), _12 = _11.next(); !_12.done; _12 = _11.next()) {
                var def = _12.value;
                if (ng_mocks_universe_1.ngMocksUniverse.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                var mock = ng_mocks_universe_1.ngMocksUniverse.builder.get(def);
                providers.push(mock
                    ? mock
                    : {
                        provide: def,
                        useValue: undefined,
                    });
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_12 && !_12.done && (_l = _11.return)) _l.call(_11);
            }
            finally { if (e_11) throw e_11.error; }
        }
        try {
            for (var _13 = __values(common_1.mapValues(this.providerDef)), _14 = _13.next(); !_14.done; _14 = _13.next()) {
                var provider = _14.value;
                if (!provider) {
                    continue;
                }
                providers.push(provider);
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_14 && !_14.done && (_m = _13.return)) _m.call(_13);
            }
            finally { if (e_12) throw e_12.error; }
        }
        var ngMocks = new Map();
        try {
            for (var _15 = __values(__spread(common_1.mapEntries(ng_mocks_universe_1.ngMocksUniverse.builder), common_1.mapEntries(ng_mocks_universe_1.ngMocksUniverse.cache))), _16 = _15.next(); !_16.done; _16 = _15.next()) {
                var _17 = __read(_16.value, 2), key = _17[0], value = _17[1];
                ngMocks.set(key, value);
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_16 && !_16.done && (_o = _15.return)) _o.call(_15);
            }
            finally { if (e_13) throw e_13.error; }
        }
        providers.push({
            provide: common_1.NG_MOCKS,
            useValue: ngMocks,
        });
        try {
            for (var _18 = __values(Object.keys(backup)), _19 = _18.next(); !_19.done; _19 = _18.next()) {
                var key = _19.value;
                ng_mocks_universe_1.ngMocksUniverse[key] = backup[key];
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_19 && !_19.done && (_p = _18.return)) _p.call(_18);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return {
            declarations: declarations,
            imports: imports,
            providers: providers,
        };
    };
    MockBuilderPromise.prototype.keep = function (def, config) {
        if (common_1.isNgDef(def, 'm')) {
            this.mockDef.module.delete(def);
            this.replaceDef.module.delete(def);
            this.keepDef.module.add(def);
        }
        else if (common_1.isNgDef(def, 'c')) {
            this.mockDef.component.delete(def);
            this.replaceDef.component.delete(def);
            this.keepDef.component.add(def);
        }
        else if (common_1.isNgDef(def, 'd')) {
            this.mockDef.directive.delete(def);
            this.replaceDef.directive.delete(def);
            this.keepDef.directive.add(def);
        }
        else if (common_1.isNgDef(def, 'p')) {
            this.mockDef.pipe.delete(def);
            this.mockDef.pipeTransform.delete(def);
            this.replaceDef.pipe.delete(def);
            this.keepDef.pipe.add(def);
        }
        else {
            this.mockDef.provider.delete(def);
            this.mockDef.providerMock.delete(def);
            this.providerDef.delete(def);
            this.keepDef.provider.add(def);
        }
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
        return this;
    };
    MockBuilderPromise.prototype.mock = function (def, a1, a2) {
        if (a1 === void 0) { a1 = defaultMock; }
        var mock = a1;
        var config = a1 === defaultMock ? undefined : a1;
        if (common_1.isNgDef(def, 'p') && typeof a1 === 'function') {
            mock = a1;
            config = a2;
        }
        if (common_1.isNgDef(def, 'm')) {
            this.keepDef.module.delete(def);
            this.replaceDef.module.delete(def);
            this.mockDef.module.add(def);
        }
        else if (common_1.isNgDef(def, 'c')) {
            this.keepDef.component.delete(def);
            this.replaceDef.component.delete(def);
            this.mockDef.component.add(def);
        }
        else if (common_1.isNgDef(def, 'd')) {
            this.keepDef.directive.delete(def);
            this.replaceDef.directive.delete(def);
            this.mockDef.directive.add(def);
        }
        else if (common_1.isNgDef(def, 'p')) {
            this.keepDef.pipe.delete(def);
            this.replaceDef.pipe.delete(def);
            this.mockDef.pipe.add(def);
            if (typeof mock === 'function') {
                this.mockDef.pipeTransform.set(def, mock);
            }
        }
        else {
            this.keepDef.provider.delete(def);
            this.providerDef.delete(def);
            this.mockDef.provider.add(def);
            if (mock !== defaultMock) {
                this.mockDef.providerMock.set(def, mock);
            }
            config = undefined;
        }
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
        return this;
    };
    MockBuilderPromise.prototype.provide = function (def) {
        var e_15, _a;
        try {
            for (var _b = __values(common_1.flatten(def)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var provider = _c.value;
                var provide = typeof provider === 'object' && provider.provide ? provider.provide : provider;
                var multi = typeof provider === 'object' && provider.provide && provider.multi;
                this.keepDef.provider.delete(provide);
                this.mockDef.provider.delete(provide);
                var existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];
                this.providerDef.set(provide, multi ? __spread((Array.isArray(existing) ? existing : []), [provider]) : provider);
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        return this;
    };
    MockBuilderPromise.prototype.replace = function (source, destination, config) {
        if (common_1.isNgDef(source, 'm') && common_1.isNgDef(destination, 'm')) {
            this.keepDef.module.delete(source);
            this.mockDef.module.delete(source);
            this.replaceDef.module.set(source, destination);
        }
        else if (common_1.isNgDef(source, 'c') && common_1.isNgDef(destination, 'c')) {
            this.keepDef.component.delete(source);
            this.mockDef.component.delete(source);
            this.replaceDef.component.set(source, destination);
        }
        else if (common_1.isNgDef(source, 'd') && common_1.isNgDef(destination, 'd')) {
            this.keepDef.directive.delete(source);
            this.mockDef.directive.delete(source);
            this.replaceDef.directive.set(source, destination);
        }
        else if (common_1.isNgDef(source, 'p') && common_1.isNgDef(destination, 'p')) {
            this.keepDef.pipe.delete(source);
            this.mockDef.pipe.delete(source);
            this.replaceDef.pipe.set(source, destination);
        }
        else {
            throw new Error('cannot replace the source by destination destination, wrong types');
        }
        if (config) {
            this.configDef.set(source, config);
        }
        else {
            this.configDef.delete(source);
        }
        return this;
    };
    MockBuilderPromise.prototype.then = function (fulfill, reject) {
        var _this = this;
        var promise = new Promise(function (resolve) {
            var e_16, _a;
            var testBed = testing_1.TestBed.configureTestingModule(_this.build());
            try {
                for (var _b = __values(common_1.mapValues(_this.beforeCC)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var callback = _c.value;
                    callback(testBed);
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_16) throw e_16.error; }
            }
            testBed.compileComponents().then(function () {
                resolve({ testBed: testBed });
            });
        });
        return promise.then(fulfill, reject);
    };
    return MockBuilderPromise;
}());
exports.MockBuilderPromise = MockBuilderPromise;
function MockBuilder(componentToTest, itsModuleToMock) {
    var instance = new MockBuilderPromise();
    if (componentToTest) {
        instance.keep(componentToTest, {
            export: true,
        });
    }
    if (itsModuleToMock) {
        instance.mock(itsModuleToMock);
    }
    return instance;
}
exports.MockBuilder = MockBuilder;
//# sourceMappingURL=mock-builder.js.map