import { InjectionToken, NgModule, PipeTransform, Provider } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { Type } from '../common';
export interface IMockBuilderResult {
    testBed: typeof TestBed;
}
export interface IMockBuilderConfigAll {
    dependency?: boolean;
    export?: boolean;
}
export interface IMockBuilderConfigComponent {
    render?: {
        [blockName: string]: boolean | {
            $implicit?: any;
            variables?: {
                [key: string]: any;
            };
        };
    };
}
export interface IMockBuilderConfigDirective {
    render?: boolean | {
        $implicit?: any;
        variables?: {
            [key: string]: any;
        };
    };
}
export declare type IMockBuilderConfig = IMockBuilderConfigAll | IMockBuilderConfigComponent | IMockBuilderConfigDirective;
export declare class MockBuilderPromise implements PromiseLike<IMockBuilderResult> {
    protected beforeCC: Set<(testBed: typeof TestBed) => void>;
    protected configDef: Map<Type<any> | InjectionToken<any>, any>;
    protected keepDef: {
        component: Set<Type<any>>;
        directive: Set<Type<any>>;
        module: Set<Type<any>>;
        pipe: Set<Type<any & PipeTransform>>;
        provider: Set<Type<any> | InjectionToken<any>>;
    };
    protected mockDef: {
        component: Set<Type<any>>;
        directive: Set<Type<any>>;
        module: Set<Type<any>>;
        pipe: Set<Type<any & PipeTransform>>;
        pipeTransform: Map<Type<any & PipeTransform>, PipeTransform['transform']>;
        provider: Set<Type<any> | InjectionToken<any>>;
        providerMock: Map<Type<any> | InjectionToken<any>, any>;
    };
    protected providerDef: Map<Type<any> | InjectionToken<any>, Provider>;
    protected replaceDef: {
        component: Map<Type<any>, Type<any>>;
        directive: Map<Type<any>, Type<any>>;
        module: Map<Type<any>, Type<any>>;
        pipe: Map<Type<any & PipeTransform>, Type<any & PipeTransform>>;
    };
    beforeCompileComponents(callback: (testBed: typeof TestBed) => void): this;
    build(): NgModule;
    keep(def: any, config?: IMockBuilderConfig): this;
    mock(pipe: Type<PipeTransform>, config?: IMockBuilderConfig): this;
    mock(pipe: Type<PipeTransform>, mock?: PipeTransform['transform'], config?: IMockBuilderConfig): this;
    mock<T>(token: InjectionToken<T>, mock?: any): this;
    mock<T>(def: Type<T>, mock: IMockBuilderConfig): this;
    mock<T>(provider: Type<T>, mock?: any): this;
    mock<T>(def: Type<T>): this;
    provide(def: Provider): this;
    replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this;
    then<TResult1 = IMockBuilderResult, TResult2 = never>(fulfill?: (value: IMockBuilderResult) => PromiseLike<TResult1>, reject?: (reason: any) => PromiseLike<TResult2>): PromiseLike<TResult1 | TResult2>;
}
export declare function MockBuilder(componentToTest?: Type<any>, itsModuleToMock?: Type<any>): MockBuilderPromise;
