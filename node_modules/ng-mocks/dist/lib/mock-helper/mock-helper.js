"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngMocks = exports.MockHelper = void 0;
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var common_1 = require("../common");
var reflect_1 = require("../common/reflect");
var mock_service_1 = require("../mock-service");
function nestedCheck(result, node, callback) {
    var element = callback(node);
    if (element) {
        result.push(element);
    }
    var childNodes = node.childNodes ? node.childNodes : [];
    childNodes.forEach(function (childNode) {
        nestedCheck(result, childNode, callback);
    });
}
exports.MockHelper = {
    getInput: function (debugNode, input) { return exports.ngMocks.input(debugNode, input, undefined); },
    getInputOrFail: function (debugNode, input) { return exports.ngMocks.input(debugNode, input); },
    getOutput: function (debugNode, output) { return exports.ngMocks.output(debugNode, output, undefined); },
    getOutputOrFail: function (debugNode, output) { return exports.ngMocks.output(debugNode, output); },
    getDirectiveOrFail: function (debugNode, directive) { return exports.ngMocks.get(debugNode, directive); },
    getDirective: function (debugNode, directive) {
        return exports.ngMocks.get(debugNode, directive, undefined);
    },
    findDirectiveOrFail: function (debugNode, directive) {
        return exports.ngMocks.findInstance(debugNode, directive);
    },
    findDirective: function (debugNode, directive) {
        return exports.ngMocks.findInstance(debugNode, directive, undefined);
    },
    findDirectives: function (debugNode, directive) {
        return exports.ngMocks.findInstances(debugNode, directive);
    },
    findOrFail: function (el, sel) { return exports.ngMocks.find(el, sel); },
    find: function (el, sel) { return exports.ngMocks.find(el, sel, null); },
    findAll: function (el, sel) { return exports.ngMocks.findAll(el, sel); },
    mockService: function (instance, override, style) {
        return typeof override === 'object' ? exports.ngMocks.stub(instance, override) : exports.ngMocks.stub(instance, override, style);
    },
};
var defaultNotFoundValue = {};
exports.ngMocks = {
    find: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var el = args[0];
        var sel = args[1];
        var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
        var term = typeof sel === 'string' ? platform_browser_1.By.css(sel) : platform_browser_1.By.directive(common_1.getSourceOfMock(sel));
        var result = el.query(term);
        if (result) {
            return result;
        }
        if (notFoundValue !== defaultNotFoundValue) {
            return notFoundValue;
        }
        if (!result) {
            throw new Error("Cannot find an element via ngMocks.find(" + (typeof sel === 'string' ? sel : sel.name) + ")");
        }
    },
    findAll: function (el, sel) {
        var term = typeof sel === 'string' ? platform_browser_1.By.css(sel) : platform_browser_1.By.directive(common_1.getSourceOfMock(sel));
        return el.queryAll(term);
    },
    findInstance: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var el = args[0];
        var sel = args[1];
        var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
        var result = exports.ngMocks.findInstances(el, common_1.getSourceOfMock(sel));
        if (result.length) {
            return result[0];
        }
        if (notFoundValue !== defaultNotFoundValue) {
            return notFoundValue;
        }
        throw new Error("Cannot find " + sel.name + " directive via ngMocks.findInstance");
    },
    findInstances: function (el, sel) {
        var result = [];
        nestedCheck(result, el, function (node) {
            try {
                return node.injector.get(common_1.getSourceOfMock(sel));
            }
            catch (error) {
                return undefined;
            }
        });
        return result;
    },
    get: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var el = args[0];
        var sel = args[1];
        var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
        var notFound = false;
        try {
            return el.injector.get(common_1.getSourceOfMock(sel));
        }
        catch (error) {
        }
        var prevNode = notFound ? undefined : el.nativeNode.previousSibling;
        if (!prevNode || prevNode.nodeName !== '#comment') {
            notFound = true;
        }
        var matches = notFound || !el || !el.parent ? [] : el.parent.queryAllNodes(function (node) { return node.nativeNode === prevNode; });
        if (matches.length === 0) {
            notFound = true;
        }
        var matchedNode = matches[0];
        try {
            return matchedNode.injector.get(common_1.getSourceOfMock(sel));
        }
        catch (error) {
            notFound = true;
        }
        if (notFound && notFoundValue !== defaultNotFoundValue) {
            return notFoundValue;
        }
        throw new Error("Cannot find " + sel.name + " directive via ngMocks.get");
    },
    input: function () {
        var e_1, _a, e_2, _b;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var el = args[0];
        var sel = args[1];
        var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
        try {
            for (var _c = __values(el.providerTokens), _d = _c.next(); !_d.done; _d = _c.next()) {
                var token = _d.value;
                if (common_1.isNgInjectionToken(token)) {
                    continue;
                }
                var meta = void 0;
                if (!meta) {
                    try {
                        meta = reflect_1.directiveResolver.resolve(token);
                    }
                    catch (e) {
                        throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
                    }
                }
                var inputs = meta.inputs;
                if (!inputs) {
                    continue;
                }
                try {
                    for (var inputs_1 = (e_2 = void 0, __values(inputs)), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                        var inputDef = inputs_1_1.value;
                        var _e = __read(inputDef.split(':', 2).map(function (v) { return v.trim(); }), 2), _f = _e[0], prop = _f === void 0 ? '' : _f, _g = _e[1], alias = _g === void 0 ? '' : _g;
                        if (!prop) {
                            continue;
                        }
                        if (!alias && prop !== sel) {
                            continue;
                        }
                        if (alias && alias !== sel) {
                            continue;
                        }
                        var directive = exports.ngMocks.get(el, token, undefined);
                        if (!directive) {
                            continue;
                        }
                        return directive[prop];
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (inputs_1_1 && !inputs_1_1.done && (_b = inputs_1.return)) _b.call(inputs_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (notFoundValue !== defaultNotFoundValue) {
            return notFoundValue;
        }
        throw new Error("Cannot find " + sel + " input via ngMocks.input");
    },
    output: function () {
        var e_3, _a, e_4, _b;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var el = args[0];
        var sel = args[1];
        var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
        try {
            for (var _c = __values(el.providerTokens), _d = _c.next(); !_d.done; _d = _c.next()) {
                var token = _d.value;
                if (common_1.isNgInjectionToken(token)) {
                    continue;
                }
                var meta = void 0;
                if (!meta) {
                    try {
                        meta = reflect_1.directiveResolver.resolve(token);
                    }
                    catch (e) {
                        throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
                    }
                }
                var outputs = meta.outputs;
                if (!outputs) {
                    continue;
                }
                try {
                    for (var outputs_1 = (e_4 = void 0, __values(outputs)), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                        var outputDef = outputs_1_1.value;
                        var _e = __read(outputDef.split(':', 2).map(function (v) { return v.trim(); }), 2), _f = _e[0], prop = _f === void 0 ? '' : _f, _g = _e[1], alias = _g === void 0 ? '' : _g;
                        if (!prop) {
                            continue;
                        }
                        if (!alias && prop !== sel) {
                            continue;
                        }
                        if (alias && alias !== sel) {
                            continue;
                        }
                        var directive = exports.ngMocks.get(el, token, undefined);
                        if (!directive) {
                            continue;
                        }
                        return directive[prop];
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (outputs_1_1 && !outputs_1_1.done && (_b = outputs_1.return)) _b.call(outputs_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (notFoundValue !== defaultNotFoundValue) {
            return notFoundValue;
        }
        throw new Error("Cannot find " + sel + " input via ngMocks.output");
    },
    stub: function (instance, override, style) {
        var e_5, _a;
        if (typeof override === 'string') {
            return mock_service_1.mockServiceHelper.mock(instance, override, style);
        }
        try {
            for (var _b = __values(Object.getOwnPropertyNames(override)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var def = Object.getOwnPropertyDescriptor(override, key);
                if (def) {
                    Object.defineProperty(instance, key, def);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return instance;
    },
    flushTestBed: function () {
        var testBed = testing_1.getTestBed();
        testBed._instantiated = false;
        testBed._moduleFactory = undefined;
        testBed._testModuleRef = null;
    },
};
//# sourceMappingURL=mock-helper.js.map