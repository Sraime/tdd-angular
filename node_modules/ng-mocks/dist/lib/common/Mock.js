"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockControlValueAccessor = exports.Mock = void 0;
var core_1 = require("@angular/core");
var mock_service_1 = require("../mock-service");
var Mock = (function () {
    function Mock() {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
        this.__ngMocksMock = true;
        try {
            for (var _f = __values(this.__mockedOutputs), _g = _f.next(); !_g.done; _g = _f.next()) {
                var output = _g.value;
                if (this[output] || Object.getOwnPropertyDescriptor(this, output)) {
                    continue;
                }
                this[output] = new core_1.EventEmitter();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var prototype = Object.getPrototypeOf(this);
        try {
            for (var _h = __values(mock_service_1.mockServiceHelper.extractMethodsFromPrototype(prototype)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var method = _j.value;
                var descriptor = mock_service_1.mockServiceHelper.extractPropertyDescriptor(prototype, method);
                if (descriptor) {
                    Object.defineProperty(this, method, descriptor);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _k = __values(mock_service_1.mockServiceHelper.extractPropertiesFromPrototype(prototype)), _l = _k.next(); !_l.done; _l = _k.next()) {
                var prop = _l.value;
                var descriptor = mock_service_1.mockServiceHelper.extractPropertyDescriptor(prototype, prop);
                if (!descriptor) {
                    continue;
                }
                Object.defineProperty(this, prop, descriptor);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _m = __values(mock_service_1.mockServiceHelper.extractMethodsFromPrototype(this.constructor.mockOf.prototype)), _o = _m.next(); !_o.done; _o = _m.next()) {
                var method = _o.value;
                if (this[method] || Object.getOwnPropertyDescriptor(this, method)) {
                    continue;
                }
                mock_service_1.mockServiceHelper.mock(this, method);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _p = __values(mock_service_1.mockServiceHelper.extractPropertiesFromPrototype(this.constructor.mockOf.prototype)), _q = _p.next(); !_q.done; _q = _p.next()) {
                var prop = _q.value;
                if (this[prop] || Object.getOwnPropertyDescriptor(this, prop)) {
                    continue;
                }
                mock_service_1.mockServiceHelper.mock(this, prop, 'get');
                mock_service_1.mockServiceHelper.mock(this, prop, 'set');
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
            }
            finally { if (e_5) throw e_5.error; }
        }
        Object.setPrototypeOf(this, this.constructor.mockOf.prototype);
    }
    return Mock;
}());
exports.Mock = Mock;
var MockControlValueAccessor = (function (_super) {
    __extends(MockControlValueAccessor, _super);
    function MockControlValueAccessor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.__ngMocksMockControlValueAccessor = true;
        _this.__simulateChange = function (value) { };
        _this.__simulateTouch = function () { };
        _this.__simulateValidatorChange = function () { };
        _this.setDisabledState = function (isDisabled) { };
        _this.validate = function (control) { return null; };
        _this.writeValue = function (value) { };
        return _this;
    }
    MockControlValueAccessor.prototype.registerOnChange = function (fn) {
        this.__simulateChange = fn;
    };
    MockControlValueAccessor.prototype.registerOnTouched = function (fn) {
        this.__simulateTouch = fn;
    };
    MockControlValueAccessor.prototype.registerOnValidatorChange = function (fn) {
        this.__simulateValidatorChange = fn;
    };
    return MockControlValueAccessor;
}(Mock));
exports.MockControlValueAccessor = MockControlValueAccessor;
//# sourceMappingURL=Mock.js.map