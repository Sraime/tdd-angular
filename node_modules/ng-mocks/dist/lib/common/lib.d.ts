import { InjectionToken, PipeTransform, Provider } from '@angular/core';
import { MockedComponent } from '../mock-component';
import { MockedDirective } from '../mock-directive';
import { MockedModule } from '../mock-module';
import { MockedPipe } from '../mock-pipe';
export interface AbstractType<T> extends Function {
    prototype: T;
}
export interface Type<T> extends Function {
    new (...args: any[]): T;
}
export interface NgModuleWithProviders<T = any> {
    ngModule: Type<T>;
    providers?: Provider[];
}
export declare const NG_MOCKS: InjectionToken<Map<any, any>>;
export declare const getNgMocksFromTestBed: () => Map<any, any> | undefined;
export declare const flatten: <T>(values: T | T[], result?: T[]) => T[];
export declare const mapKeys: <T>(set: Map<T, any>) => T[];
export declare const mapValues: <T>(set: {
    forEach(a1: (value: T) => void): void;
}) => T[];
export declare const mapEntries: <K, T>(set: Map<K, T>) => [K, T][];
export declare const isNgType: (object: Type<any>, type: string) => boolean;
export declare function isNgDef(object: any, ngType: 'm' | 'c' | 'd'): object is Type<any>;
export declare function isNgDef(object: any, ngType: 'p'): object is Type<PipeTransform>;
export declare function isMockedNgDefOf<T>(object: any, type: Type<T>, ngType: 'm'): object is Type<MockedModule<T>>;
export declare function isMockedNgDefOf<T>(object: any, type: Type<T>, ngType: 'c'): object is Type<MockedComponent<T>>;
export declare function isMockedNgDefOf<T>(object: any, type: Type<T>, ngType: 'd'): object is Type<MockedDirective<T>>;
export declare function isMockedNgDefOf<T extends PipeTransform>(object: any, type: Type<T>, ngType: 'p'): object is Type<MockedPipe<T>>;
export declare function isMockedNgDefOf<T>(object: any, type: Type<T>): object is Type<T>;
export declare const isNgInjectionToken: (object: any) => object is InjectionToken<any>;
export declare const isNgModuleDefWithProviders: (object: any) => object is NgModuleWithProviders<any>;
export declare function isMockOf<T>(object: any, type: Type<T>, ngType: 'm'): object is MockedModule<T>;
export declare function isMockOf<T>(object: any, type: Type<T>, ngType: 'c'): object is MockedComponent<T>;
export declare function isMockOf<T>(object: any, type: Type<T>, ngType: 'd'): object is MockedDirective<T>;
export declare function isMockOf<T extends PipeTransform>(object: any, type: Type<T>, ngType: 'p'): object is MockedPipe<T>;
export declare function isMockOf<T>(object: any, type: Type<T>): object is T;
export declare function getMockedNgDefOf<T>(type: Type<T>, ngType: 'm'): Type<MockedModule<T>>;
export declare function getMockedNgDefOf<T>(type: Type<T>, ngType: 'c'): Type<MockedComponent<T>>;
export declare function getMockedNgDefOf<T>(type: Type<T>, ngType: 'd'): Type<MockedDirective<T>>;
export declare function getMockedNgDefOf<T>(type: Type<T>, ngType: 'p'): Type<MockedPipe<T>>;
export declare function getMockedNgDefOf(type: Type<any>): Type<any>;
export declare function getSourceOfMock<T>(type: Type<MockedModule<T>>): Type<T>;
export declare function getSourceOfMock<T>(type: Type<MockedComponent<T>>): Type<T>;
export declare function getSourceOfMock<T>(type: Type<MockedDirective<T>>): Type<T>;
export declare function getSourceOfMock<T>(type: Type<MockedPipe<T>>): Type<T>;
export declare function getSourceOfMock<T>(type: Type<T>): Type<T>;
